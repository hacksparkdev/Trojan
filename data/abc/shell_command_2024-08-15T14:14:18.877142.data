Command: systeminfo
Result:

Host Name:                 DESKTOP-FCMCI6C
OS Name:                   Microsoft Windows 10 Enterprise Evaluation
OS Version:                10.0.19045 N/A Build 19045
OS Manufacturer:           Microsoft Corporation
OS Configuration:          Member Workstation
OS Build Type:             Multiprocessor Free
Registered Owner:          Corey
Registered Organization:   
Product ID:                00329-20000-00001-AA295
Original Install Date:     6/17/2024, 7:01:01 PM
System Boot Time:          8/15/2024, 1:11:44 PM
System Manufacturer:       QEMU
System Model:              Standard PC (Q35 + ICH9, 2009)
System Type:               x64-based PC
Processor(s):              1 Processor(s) Installed.
                           [01]: Intel64 Family 6 Model 45 Stepping 7 GenuineIntel ~2900 Mhz
BIOS Version:              Proxmox distribution of EDK II 4.2023.08-4, 2/15/2024
Windows Directory:         C:\Windows
System Directory:          C:\Windows\system32
Boot Device:               \Device\HarddiskVolume1
System Locale:             en-us;English (United States)
Input Locale:              en-us;English (United States)
Time Zone:                 (UTC-08:00) Pacific Time (US & Canada)
Total Physical Memory:     4,059 MB
Available Physical Memory: 1,213 MB
Virtual Memory: Max Size:  4,763 MB
Virtual Memory: Available: 1,923 MB
Virtual Memory: In Use:    2,840 MB
Page File Location(s):     C:\pagefile.sys
Domain:                    hackspark.local
Logon Server:              \\LAB-DC
Hotfix(s):                 11 Hotfix(s) Installed.
                           [01]: KB5042097
                           [02]: KB5017022
                           [03]: KB5011048
                           [04]: KB5015684
                           [05]: KB5026037
                           [06]: KB5040427
                           [07]: KB5014032
                           [08]: KB5016705
                           [09]: KB5037995
                           [10]: KB5039336
                           [11]: KB5041579
Network Card(s):           1 NIC(s) Installed.
                           [01]: Intel(R) PRO/1000 MT Network Connection
                                 Connection Name: Ethernet
                                 DHCP Enabled:    Yes
                                 DHCP Server:     10.10.20.10
                                 IP address(es)
                                 [01]: 10.10.20.100
                                 [02]: fe80::fed7:1772:dc3e:5f8a
Hyper-V Requirements:      A hypervisor has been detected. Features required for Hyper-V will not be displayed.
